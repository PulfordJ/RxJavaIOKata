/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reactivefilereadingjava;

import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.core.BackpressureStrategy;
import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Observable;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

public class App {
    public static long expensive_calculation(long value) {
        System.out.println("Sleeping for 10s in stream "+value);
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return value;
    }

    public static void main(String[] args) throws InterruptedException, IOException {

        Observable<Long> fileModifiedInterval = Observable.interval(1, TimeUnit.SECONDS);
        fileModifiedInterval.subscribe(System.out::println);

        String fileName = "/dev/shm/myinput.txt";

        File file = new File(fileName);

        @NonNull Flowable<Long> fileWasModified = fileModifiedInterval
                .toFlowable(BackpressureStrategy.LATEST)
                .map(i -> expensive_calculation(i))
                .map(i -> file.lastModified())
                .distinctUntilChanged()
                .replay(1)
                .refCount();

        fileWasModified.subscribe(System.out::println);

        fileWasModified
                .map(i -> Files.readString(Paths.get(fileName), StandardCharsets.US_ASCII))
                .subscribe(System.out::println);

        while(true) {
            Thread.sleep(10000);
        }
    }
}
